unbind C-b
set -g prefix C-s

bind-key r source-file ~/.tmux.conf \; display-message "~/.tmux.conf reloaded"

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?)(diff)?$'"
bind-key -n 'C-h' if-shell "$is_vim" 'send-keys C-h'  'select-pane -L'
bind-key -n 'C-j' if-shell "$is_vim" 'send-keys C-j'  'select-pane -D'
bind-key -n 'C-k' if-shell "$is_vim" 'send-keys C-k'  'select-pane -U'
bind-key -n 'C-l' if-shell "$is_vim" 'send-keys C-l'  'select-pane -R'
tmux_version='$(tmux -V | sed -En "s/^tmux ([0-9]+(.[0-9]+)?).*/\1/p")'
if-shell -b '[ "$(echo "$tmux_version < 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\'  'select-pane -l'"
if-shell -b '[ "$(echo "$tmux_version >= 3.0" | bc)" = 1 ]' \
    "bind-key -n 'C-\\' if-shell \"$is_vim\" 'send-keys C-\\\\'  'select-pane -l'"

bind-key -T copy-mode-vi 'C-h' select-pane -L
bind-key -T copy-mode-vi 'C-j' select-pane -D
bind-key -T copy-mode-vi 'C-k' select-pane -U
bind-key -T copy-mode-vi 'C-l' select-pane -R

# set tmux to allow using more than 16 colors (default)
set -g default-terminal "screen-256color"

# set colors for status bar
set -g status-bg "#1a547b"
set -g status-fg "#e0e0e0"

# what to display in the status bar
set -g status on
set -g status-right " #(date '+%a %d/%m %H:%M') "

is_repo="[ $(git -C . rev-parse 2>/dev/null; echo $?) -eq 0 ]" 
if-shell -b "$is_repo" 'set -g status-left " [#(echo '\u2325') #(git branch --show-current)] [#S] "' 
is_not_repo="[ $(git -C . rev-parse 2>/dev/null; echo $?) -gt 0 ]" 
if-shell -b "$is_not_repo" 'set -g status-left " [#S] "' 

set -g status-left-length 50
set -g status-left-length 50
set -g status-left-length 50
set -g status-left-length 50
set -g status-left-length 50

# hooks for keeping git branches updated
set-hook -g pane-focus-in "refresh-client -S"
set-hook -g pane-focus-out "refresh-client -S"

# use more intuitive/visual key bindings for splitting windows
bind-key - split-window -v -c '#{pane_current_path}'
bind-key | split-window -h -c '#{pane_current_path}' 
# create new windows with focus on the current directory
bind c new-window -c "#{pane_current_path}"
set -g base-index 1
set -g renumber-windows on
bind-key b break-pane -d

# Fine adjustment (1 or 2 cursor cells per bump)
bind -n S-Left resize-pane -L 4
bind -n S-Right resize-pane -R 4
bind -n S-Down resize-pane -D 4
bind -n S-Up resize-pane -U 4

# Use vim keybindings in copy mode
#setw -g mode-keys vi

# # Setup 'v' to begin selection as in Vim
# bind-key -t vi-copy v begin-selection
# bind-key -t vi-copy y copy-pipe "reattach-to-user-namespace pbcopy"
# # Update default binding of `Enter` to also use copy-pipe
# unbind -t vi-copy Enter
# bind-key -t vi-copy Enter copy-pipe "reattach-to-user-namespace pbcopy"

bind-key t split-window -h "vim ~/todo.md"
bind-key w split-window -h "vim +CtrlP"
